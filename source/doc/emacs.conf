(defun color-theme-jyu ()
  (interactive)
  (color-theme-install
   '(color-theme-jyu
      ((background-color . "#f5f5f4")
      (background-mode . light)
      (border-color . "#c4c1bf")
      (cursor-color . "#58566c")
      (foreground-color . "#050505")
      (mouse-color . "black"))
     (fringe ((t (:background "#c4c1bf"))))
     (mode-line ((t (:foreground "#ffffff" :background "#888181"))))
     (region ((t (:background "#dcdbe1"))))
     (font-lock-builtin-face ((t (:foreground "#595bb1"))))
     (font-lock-comment-face ((t (:foreground "#a8b4c2"))))
     (font-lock-function-name-face ((t (:foreground "#cb5b1a"))))
     (font-lock-keyword-face ((t (:foreground "#226bf7"))))
     (font-lock-string-face ((t (:foreground "#724d2c"))))
     (font-lock-type-face ((t (:foreground"#5418cd"))))
     (font-lock-variable-name-face ((t (:foreground "#710e1e"))))
     (minibuffer-prompt ((t (:foreground "#150f10" :bold t))))
     (font-lock-warning-face ((t (:foreground "Red" :bold t))))
     )))
(provide 'color-theme-jyu)

(add-to-list 'load-path "~/.emacs.d")
(add-to-list 'load-path "~/.emacs.d/color-theme/")
(add-to-list 'load-path "~/.emacs.d/color-theme/color-theme-tango.el")
(require 'color-theme)
     (color-theme-initialize)
     (color-theme-jyu)

;; You're expected to populate .emacs.d/local.el
;; with your own code. This file is under .gitignore
;; so it won't be version-controlled. The idea is to
;; make this file load other version-controlled files.
(load "local")
(add-to-list 'load-path "~/.emacs.d/scala-emacs")
(require 'scala-mode-auto)

(add-hook 'scala-mode-hook
                      '(lambda ()
                                    (scala-mode-feature-electric-mode)
                                                   ))
(require 'scala-mode)
(add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
(add-to-list 'load-path "~/.emacs.d/ensime/elisp/")
(require 'ensime)
(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)

;;(require 'ido)


(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(ido-default-file-method (quote other-window))
 '(ido-ignore-directories (quote ("\\`CVS/" "\\`\\.\\./" "\\`\\./")))
 '(ido-mode (quote both) nil (ido))
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

;;;;
(add-to-list 'load-path "~/.emacs.d/anything-config/")
     (require 'anything-config)

;;*directory
(defun make-anything-directory-source (source-name dir)
  "Returns an anything source for a particular directory"
  `((name . ,(concat source-name))
  (candidates . (lambda ()
          (directory-files
           ,dir)))
  (action . find-file)
  (type . file)))

(add-to-list 'load-path "~/.emacs.d/cucumber/")
(require 'feature-mode)
(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))

(add-to-list 'load-path
              "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas/global-mode 1)

(add-to-list 'load-path "~/.emacs.d/auto-complete")
(add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete/dict")
(require 'auto-complete-config)
(ac-config-default)

(add-hook 'java-mode-hook
              (lambda ()
                "Treat Java 1.5 @-style annotations as comments."
                (setq c-comment-start-regexp "(@|/(/|[*][*]?))")
                (modify-syntax-entry ?@ "< b" java-mode-syntax-table)
                (setq c-basic-offset 2
                                      tab-width 2
                                      indent-tabs-mode t)))

(require 'fill-column-indicator)
(setq fci-rule-column 100)
(setq fci-rule-width 4)
(setq fci-rule-color "gray")


(setq default-tab-width 4 indent-tabs-mode nil)
(setq tab-width 4 indent-tabs-mode nil)
(setq tab-stop-list ())
(show-paren-mode 1)
(require 'undo-tree)


    (require 'flymake)
    
    
;; (require 'flymake)
(defvar flymake-eclipse-batch-compiler-path
  "/Users/julius.yu/ecj.jar")

;; TODO fix hardcoded 1.6
(defvar flymake-java-version "1.6")
;;/Users/julius.yu/repository/com.thenetcircle.services.media.git/lib/standalone/core.jar:/Users/julius.yu/repository/com.thenetcircle.services.media.git/lib/standalone/imgscalr-lib-4.2.jar:/Users/julius.yu/repository/com.thenetcircle.services.media.git/target/classes:/Users/julius.yu/repository/com.thenetcircle.services.media.git/target/test-classes:/Users/julius.yu/.m2/repository/junit/junit/4.10/junit-4.10.jar
(defvar project-classpath "/Users/julius.yu/repository/com.thenetcircle.services.media.git/lib/standalone/core.jar:/Users/julius.yu/repository/com.thenetcircle.services.media.git/lib/standalone/imgscalr-lib-4.2.jar:/Users/julius.yu/.m2/repository/junit/junit/4.10/junit-4.10.jar:/Users/julius.yu/repository/com.thenetcircle.services.media.git/bin/main/classes")

(defvar project-sourcepath "/Users/julius.yu/repository/com.thenetcircle.services.media.git/src/test/java:/Users/julius.yu/repository/com.thenetcircle.services.media.git/src/main/java")

(defun flymake-java-ecj-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
                     'flymake-ecj-create-temp-file))
         (local-file (file-relative-name
                      temp-file
                      (file-name-directory buffer-file-name))))
    (list "/Library/Java/JavaVirtualMachines/JDK 1.7.0 Developer Preview.jdk/Contents/Home/bin/java" (list "-jar" flymake-eclipse-batch-compiler-path "-Xemacs" "-d" "none"
                       "-warn:+over-ann,uselessTypeCheck";;,allJavadoc"
                       "-source" flymake-java-version "-target" flymake-java-version "-proceedOnError"
                       "-sourcepath" project-sourcepath
                       "-classpath" project-classpath
                       ;;"-log" "/temp/foo.xml"
                       local-file))))
    
    (defun flymake-java-ecj-cleanup ()
      "Cleanup after `flymake-java-ecj-init' -- delete temp file and dirs."
      (flymake-safe-delete-file flymake-temp-source-file-name)
      (when flymake-temp-source-file-name
        (flymake-safe-delete-directory (file-name-directory flymake-temp-source-file-name))))
(defun flymake-ecj-create-temp-file (file-name prefix)
  "Create the file FILE-NAME in a unique directory in the temp directory."
  (file-truename (expand-file-name (file-name-nondirectory file-name)
                                   (expand-file-name (int-to-string (abs (random))) (flymake-get-temp-dir)))))
    
(push '(".+\\.java$" flymake-java-ecj-init flymake-java-ecj-cleanup) flymake-allowed-file-name-masks)